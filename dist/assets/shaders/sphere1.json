{
  "id": 5165,
  "name": "New Composed Shader",
  "fragment": "#define tau 6.2831853\n#define PI 3.14159\n#define F4 0.309016994374947451\n\nprecision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 glowColor;\nuniform float time;\nuniform float contrast;\nuniform float distortion;\nuniform float Noise_Ripples1618453155384_62_speed;\nuniform vec3 Noise_Ripples1618453155384_62_color;\nuniform float Noise_Ripples1618453155384_62_brightness;\nuniform sampler2D noiseImage;\nuniform vec2 Noise_Ripples1618453155384_62_resolution;\nuniform float Speaker_Sand_Noise1618453215471_107_speed;\nuniform float waveLength;\nuniform float frequency;\nuniform vec3 Speaker_Sand_Noise1618453215471_107_color;\nuniform vec2 Speaker_Sand_Noise1618453215471_107_resolution;\nuniform float permutations;\nuniform float iterations;\nuniform vec2 uvScale;\nuniform vec3 color1;\nuniform vec3 color2;\nuniform vec3 color3;\nuniform float Molten_Noise1618453281396_130_brightness;\nuniform float Molten_Noise1618453281396_130_speed;\nvarying float intensity;\nvarying vec2 Noise_Ripples1618453155384_62_vUv;\nmat2 makem2(in float theta) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                float c = cos(theta);\n                                                                                                                                                                                                                                                                                float s = sin(theta);\n                                                                                                                                                                                                                                                                                return mat2(c, -s, s, c);\n                                                                                                                                                                                                                                                                            }\nfloat noise(in vec2 x) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                return texture2D(noiseImage, x * .01).x;\n                                                                                                                                                                                                                                                                            }\nfloat Noise_Ripples1618453155384_62_fbm(in vec2 p) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                float z = 2.;\n                                                                                                                                                                                                                                                                                float rz = 0.;\n                                                                                                                                                                                                                                                                                vec2 bp = p;\n                                                                                                                                                                                                                                                                                for (float i = 1.;\n i < 6.0; i++) \n                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                    rz += abs((noise(p) - 0.5) * 2.0) / z;\n                                                                                                                                                                                                                                                                                    z = z * 2.;\n                                                                                                                                                                                                                                                                                    p = p * 2.;\n                                                                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                                                                return rz;\n                                                                                                                                                                                                                                                                            }\nfloat dualfbm(in vec2 p) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                vec2 p2 = p * distortion;\n                                                                                                                                                                                                                                                                                vec2 basis = vec2(Noise_Ripples1618453155384_62_fbm(p2 - time * Noise_Ripples1618453155384_62_speed * 1.6), Noise_Ripples1618453155384_62_fbm(p2 + time * Noise_Ripples1618453155384_62_speed * 1.7));\n                                                                                                                                                                                                                                                                                basis = (basis - .5) * .2;\n                                                                                                                                                                                                                                                                                p += basis;\n                                                                                                                                                                                                                                                                                return Noise_Ripples1618453155384_62_fbm(p * makem2(time * Noise_Ripples1618453155384_62_speed * 0.2));\n                                                                                                                                                                                                                                                                            }\nvarying vec2 Speaker_Sand_Noise1618453215471_107_vUv;\nfloat waveEquation(float k, float x, float w, float t) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                return cos(k * x - w * t);\n                                                                                                                                                                                                                                                                            }\nfloat waveFrom(vec2 emitterPosition, vec2 position) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                float k = 2.0 * PI / waveLength;\n                                                                                                                                                                                                                                                                                float x = length(emitterPosition - position);\n                                                                                                                                                                                                                                                                                float w = 2.0 * PI * frequency;\n                                                                                                                                                                                                                                                                                float t = mod(time * Speaker_Sand_Noise1618453215471_107_speed, 1.0 / frequency);\n                                                                                                                                                                                                                                                                                return waveEquation(k, length(emitterPosition - position), w, t);\n                                                                                                                                                                                                                                                                            }\nvarying vec2 Molten_Noise1618453281396_130_vUv;\nvec4 mod289(vec4 x) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                                                                                                                                                                                                                                            }\nfloat mod289(float x) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                                                                                                                                                                                                                                            }\nvec4 permute(vec4 x) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                return mod289(((x * 34.0) + 1.0) * x);\n                                                                                                                                                                                                                                                                            }\nfloat permute(float x) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                return mod289(((x * 34.0) + 1.0) * x);\n                                                                                                                                                                                                                                                                            }\nvec4 taylorInvSqrt(vec4 r) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                return 1.79284291400159 - 0.85373472095314 * r;\n                                                                                                                                                                                                                                                                            }\nfloat taylorInvSqrt(float r) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                return 1.79284291400159 - 0.85373472095314 * r;\n                                                                                                                                                                                                                                                                            }\nvec4 grad4(float j, vec4 ip) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n                                                                                                                                                                                                                                                                                vec4 p, s;\n                                                                                                                                                                                                                                                                                p.xyz = floor(fract(vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n                                                                                                                                                                                                                                                                                p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n                                                                                                                                                                                                                                                                                s = vec4(lessThan(p, vec4(0.0)));\n                                                                                                                                                                                                                                                                                p.xyz = p.xyz + (s.xyz * 2.0 - 1.0) * s.www;\n                                                                                                                                                                                                                                                                                return p;\n                                                                                                                                                                                                                                                                            }\nfloat snoise(vec4 v) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                const vec4 C = vec4(0.138196601125011, 0.276393202250021, 0.414589803375032, -0.447213595499958);\n                                                                                                                                                                                                                                                                                vec4 i = floor(v + dot(v, vec4(F4)));\n                                                                                                                                                                                                                                                                                vec4 x0 = v - i + dot(i, C.xxxx);\n                                                                                                                                                                                                                                                                                vec4 i0;\n                                                                                                                                                                                                                                                                                vec3 isX = step(x0.yzw, x0.xxx);\n                                                                                                                                                                                                                                                                                vec3 isYZ = step(x0.zww, x0.yyz);\n                                                                                                                                                                                                                                                                                i0.x = isX.x + isX.y + isX.z;\n                                                                                                                                                                                                                                                                                i0.yzw = 1.0 - isX;\n                                                                                                                                                                                                                                                                                i0.y += isYZ.x + isYZ.y;\n                                                                                                                                                                                                                                                                                i0.zw += 1.0 - isYZ.xy;\n                                                                                                                                                                                                                                                                                i0.z += isYZ.z;\n                                                                                                                                                                                                                                                                                i0.w += 1.0 - isYZ.z;\n                                                                                                                                                                                                                                                                                vec4 i3 = clamp(i0, 0.0, 1.0);\n                                                                                                                                                                                                                                                                                vec4 i2 = clamp(i0 - 1.0, 0.0, 1.0);\n                                                                                                                                                                                                                                                                                vec4 i1 = clamp(i0 - 2.0, 0.0, 1.0);\n                                                                                                                                                                                                                                                                                vec4 x1 = x0 - i1 + C.xxxx;\n                                                                                                                                                                                                                                                                                vec4 x2 = x0 - i2 + C.yyyy;\n                                                                                                                                                                                                                                                                                vec4 x3 = x0 - i3 + C.zzzz;\n                                                                                                                                                                                                                                                                                vec4 x4 = x0 + C.wwww;\n                                                                                                                                                                                                                                                                                i = mod289(i);\n                                                                                                                                                                                                                                                                                float j0 = permute(permute(permute(permute(i.w) + i.z) + i.y) + i.x);\n                                                                                                                                                                                                                                                                                vec4 j1 = permute(permute(permute(permute(i.w + vec4(i1.w, i2.w, i3.w, 1.0)) + i.z + vec4(i1.z, i2.z, i3.z, 1.0)) + i.y + vec4(i1.y, i2.y, i3.y, 1.0)) + i.x + vec4(i1.x, i2.x, i3.x, 1.0));\n                                                                                                                                                                                                                                                                                vec4 ip = vec4(1.0 / 294.0, 1.0 / 49.0, 1.0 / 7.0, 0.0);\n                                                                                                                                                                                                                                                                                vec4 p0 = grad4(j0, ip);\n                                                                                                                                                                                                                                                                                vec4 p1 = grad4(j1.x, ip);\n                                                                                                                                                                                                                                                                                vec4 p2 = grad4(j1.y, ip);\n                                                                                                                                                                                                                                                                                vec4 p3 = grad4(j1.z, ip);\n                                                                                                                                                                                                                                                                                vec4 p4 = grad4(j1.w, ip);\n                                                                                                                                                                                                                                                                                vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n                                                                                                                                                                                                                                                                                p0 *= norm.x;\n                                                                                                                                                                                                                                                                                p1 *= norm.y;\n                                                                                                                                                                                                                                                                                p2 *= norm.z;\n                                                                                                                                                                                                                                                                                p3 *= norm.w;\n                                                                                                                                                                                                                                                                                p4 *= taylorInvSqrt(dot(p4, p4));\n                                                                                                                                                                                                                                                                                vec3 m0 = max(0.6 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);\n                                                                                                                                                                                                                                                                                vec2 m1 = max(0.6 - vec2(dot(x3, x3), dot(x4, x4)), 0.0);\n                                                                                                                                                                                                                                                                                m0 = m0 * m0;\n                                                                                                                                                                                                                                                                                m1 = m1 * m1;\n                                                                                                                                                                                                                                                                                return (49.0 * (dot(m0 * m0, vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2))) + dot(m1 * m1, vec2(dot(p3, x3), dot(p4, x4)))));\n                                                                                                                                                                                                                                                                            }\nfloat hash(float n) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                return fract(sin(n) * 93942.234);\n                                                                                                                                                                                                                                                                            }\nmat2 m = mat2(0.6, 0.8, -0.8, 0.6);\nfloat Molten_Noise1618453281396_130_fbm(vec4 p) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                float f = 0.0;\n                                                                                                                                                                                                                                                                                f += 0.5 * snoise(vec4(p.xy * m, p.zw * m));\n                                                                                                                                                                                                                                                                                p *= 2.02;\n                                                                                                                                                                                                                                                                                f += 0.25 * snoise(vec4(p.xy * m, p.zw * m));\n                                                                                                                                                                                                                                                                                p *= 2.01;\n                                                                                                                                                                                                                                                                                f += 0.125 * snoise(vec4(p.xy * m, p.zw * m));\n                                                                                                                                                                                                                                                                                p *= 2.03;\n                                                                                                                                                                                                                                                                                f += 0.0625 * snoise(vec4(p.xy * m, p.zw * m));\n                                                                                                                                                                                                                                                                                f /= 0.9375;\n                                                                                                                                                                                                                                                                                return f;\n                                                                                                                                                                                                                                                                            }\nvec4 X_ray_shader1618453044167_19_main() \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                vec4 X_ray_shader1618453044167_19_gl_FragColor = vec4(0.0);\n                                                                                                                                                                                                                                                                                vec3 glow = glowColor * intensity;\n                                                                                                                                                                                                                                                                                X_ray_shader1618453044167_19_gl_FragColor = vec4(glow, 1);\n                                                                                                                                                                                                                                                                                return X_ray_shader1618453044167_19_gl_FragColor *= 1.0;\n                                                                                                                                                                                                                                                                            }\nvec4 Noise_Ripples1618453155384_62_main() \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                vec4 Noise_Ripples1618453155384_62_gl_FragColor = vec4(0.0);\n                                                                                                                                                                                                                                                                                vec2 p = (Noise_Ripples1618453155384_62_vUv.xy - 0.5) * Noise_Ripples1618453155384_62_resolution;\n                                                                                                                                                                                                                                                                                float rz = dualfbm(p);\n                                                                                                                                                                                                                                                                                vec3 col = (Noise_Ripples1618453155384_62_color / rz) * Noise_Ripples1618453155384_62_brightness;\n                                                                                                                                                                                                                                                                                col = ((col - 0.5) * max(contrast, 0.0)) + 0.5;\n                                                                                                                                                                                                                                                                                Noise_Ripples1618453155384_62_gl_FragColor = vec4(col, 1.0);\n                                                                                                                                                                                                                                                                                return Noise_Ripples1618453155384_62_gl_FragColor *= 4.0;\n                                                                                                                                                                                                                                                                            }\nvec4 Speaker_Sand_Noise1618453215471_107_main(void) \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                vec4 Speaker_Sand_Noise1618453215471_107_gl_FragColor = vec4(0.0);\n                                                                                                                                                                                                                                                                                vec2 position = Speaker_Sand_Noise1618453215471_107_vUv.xy * Speaker_Sand_Noise1618453215471_107_resolution;\n                                                                                                                                                                                                                                                                                vec2 emitterPosition = vec2(0.5);\n                                                                                                                                                                                                                                                                                float height = 0.0;\n                                                                                                                                                                                                                                                                                const int NUM_REFLECTIONS = 2;\n                                                                                                                                                                                                                                                                                for (int x = -NUM_REFLECTIONS;\n x <= NUM_REFLECTIONS; x++) \n                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                    for (int y = -NUM_REFLECTIONS;\n y <= NUM_REFLECTIONS; y++) \n                                                                                                                                                                                                                                                                                    {\n                                                                                                                                                                                                                                                                                        height += waveFrom((vec2(x, y) + emitterPosition) * Speaker_Sand_Noise1618453215471_107_resolution, position);\n                                                                                                                                                                                                                                                                                    }\n                                                                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                                                                float outputColor = height / 2.0 / float(2 * NUM_REFLECTIONS + 1) + 0.5;\n                                                                                                                                                                                                                                                                                Speaker_Sand_Noise1618453215471_107_gl_FragColor = vec4(Speaker_Sand_Noise1618453215471_107_color * outputColor, 1.0);\n                                                                                                                                                                                                                                                                                return Speaker_Sand_Noise1618453215471_107_gl_FragColor *= 0.3;\n                                                                                                                                                                                                                                                                            }\nvec4 Molten_Noise1618453281396_130_main() \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                vec4 Molten_Noise1618453281396_130_gl_FragColor = vec4(0.0);\n                                                                                                                                                                                                                                                                                vec2 p = Molten_Noise1618453281396_130_vUv * uvScale;\n                                                                                                                                                                                                                                                                                float elapsed = time * Molten_Noise1618453281396_130_speed * 0.01;\n                                                                                                                                                                                                                                                                                float s = Molten_Noise1618453281396_130_vUv.x * uvScale.x;\n                                                                                                                                                                                                                                                                                float t = Molten_Noise1618453281396_130_vUv.y * uvScale.y;\n                                                                                                                                                                                                                                                                                float multiplier = iterations / (2.0 * PI);\n                                                                                                                                                                                                                                                                                float nx = cos(s * 2.0 * PI) * multiplier;\n                                                                                                                                                                                                                                                                                float ny = cos(t * 2.0 * PI) * multiplier;\n                                                                                                                                                                                                                                                                                float nz = sin(s * 2.0 * PI) * multiplier;\n                                                                                                                                                                                                                                                                                float nw = sin(t * 2.0 * PI) * multiplier;\n                                                                                                                                                                                                                                                                                vec4 tile4d = vec4(nx, ny, nz, nw);\n                                                                                                                                                                                                                                                                                vec2 a = vec2(Molten_Noise1618453281396_130_fbm(tile4d + elapsed * 1.1), Molten_Noise1618453281396_130_fbm(tile4d - elapsed * 1.3));\n                                                                                                                                                                                                                                                                                vec2 b = vec2(Molten_Noise1618453281396_130_fbm(tile4d + elapsed * 1.2 + a.x * 2.0), Molten_Noise1618453281396_130_fbm(tile4d - elapsed * 1.2 + a.x * 3.0));\n                                                                                                                                                                                                                                                                                float surf = Molten_Noise1618453281396_130_fbm(tile4d + elapsed + length(b) * permutations);\n                                                                                                                                                                                                                                                                                vec3 colorOutput = Molten_Noise1618453281396_130_brightness * (((b.x + surf) * color1) + ((b.y + surf) * color2) + ((surf + b.x) * color3));\n                                                                                                                                                                                                                                                                                Molten_Noise1618453281396_130_gl_FragColor = vec4(colorOutput, 1.);\n                                                                                                                                                                                                                                                                                return Molten_Noise1618453281396_130_gl_FragColor *= 0.6;\n                                                                                                                                                                                                                                                                            }\nvoid main() \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                gl_FragColor = (X_ray_shader1618453044167_19_main() + Speaker_Sand_Noise1618453215471_107_main() + Molten_Noise1618453281396_130_main() + Noise_Ripples1618453155384_62_main());                                                                                                                                                                                                                                                                            }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform float p;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying float intensity;\nvarying vec3 Noise_Ripples1618453155384_62_vPosition;\nvarying vec3 Noise_Ripples1618453155384_62_vNormal;\nvarying vec2 Noise_Ripples1618453155384_62_vUv;\nvarying vec2 Noise_Ripples1618453155384_62_vUv2;\nvarying vec3 Speaker_Sand_Noise1618453215471_107_vPosition;\nvarying vec3 Speaker_Sand_Noise1618453215471_107_vNormal;\nvarying vec2 Speaker_Sand_Noise1618453215471_107_vUv;\nvarying vec2 Speaker_Sand_Noise1618453215471_107_vUv2;\nvarying vec3 Molten_Noise1618453281396_130_vPosition;\nvarying vec3 Molten_Noise1618453281396_130_vNormal;\nvarying vec2 Molten_Noise1618453281396_130_vUv;\nvarying vec2 Molten_Noise1618453281396_130_vUv2;\nvec4 X_ray_shader1618453044167_19_main() \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                vec4 X_ray_shader1618453044167_19_gl_Position = vec4(0.0);\n                                                                                                                                                                                                                                                                                vec3 vNormal = (normalMatrix * normal);\n                                                                                                                                                                                                                                                                                intensity = pow(1.0 - abs(dot(vNormal, vec3(0, 0, 1))), p);\n                                                                                                                                                                                                                                                                                X_ray_shader1618453044167_19_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                                                                                                                                                                                                                return X_ray_shader1618453044167_19_gl_Position *= 1.0;\n                                                                                                                                                                                                                                                                            }\nvec4 Noise_Ripples1618453155384_62_main() \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                vec4 Noise_Ripples1618453155384_62_gl_Position = vec4(0.0);\n                                                                                                                                                                                                                                                                                Noise_Ripples1618453155384_62_vNormal = normal;\n                                                                                                                                                                                                                                                                                Noise_Ripples1618453155384_62_vUv = uv;\n                                                                                                                                                                                                                                                                                Noise_Ripples1618453155384_62_vUv2 = uv2;\n                                                                                                                                                                                                                                                                                Noise_Ripples1618453155384_62_vPosition = position;\n                                                                                                                                                                                                                                                                                Noise_Ripples1618453155384_62_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                                                                                                                                                                                                                return Noise_Ripples1618453155384_62_gl_Position *= 4.0;\n                                                                                                                                                                                                                                                                            }\nvec4 Speaker_Sand_Noise1618453215471_107_main() \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                vec4 Speaker_Sand_Noise1618453215471_107_gl_Position = vec4(0.0);\n                                                                                                                                                                                                                                                                                Speaker_Sand_Noise1618453215471_107_vNormal = normal;\n                                                                                                                                                                                                                                                                                Speaker_Sand_Noise1618453215471_107_vUv = uv;\n                                                                                                                                                                                                                                                                                Speaker_Sand_Noise1618453215471_107_vUv2 = uv2;\n                                                                                                                                                                                                                                                                                Speaker_Sand_Noise1618453215471_107_vPosition = position;\n                                                                                                                                                                                                                                                                                Speaker_Sand_Noise1618453215471_107_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                                                                                                                                                                                                                return Speaker_Sand_Noise1618453215471_107_gl_Position *= 0.3;\n                                                                                                                                                                                                                                                                            }\nvec4 Molten_Noise1618453281396_130_main() \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                vec4 Molten_Noise1618453281396_130_gl_Position = vec4(0.0);\n                                                                                                                                                                                                                                                                                Molten_Noise1618453281396_130_vNormal = normal;\n                                                                                                                                                                                                                                                                                Molten_Noise1618453281396_130_vUv = uv;\n                                                                                                                                                                                                                                                                                Molten_Noise1618453281396_130_vUv2 = uv2;\n                                                                                                                                                                                                                                                                                Molten_Noise1618453281396_130_vPosition = position;\n                                                                                                                                                                                                                                                                                Molten_Noise1618453281396_130_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                                                                                                                                                                                                                return Molten_Noise1618453281396_130_gl_Position *= 0.6;\n                                                                                                                                                                                                                                                                            }\nvoid main() \n                                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                                gl_Position = X_ray_shader1618453044167_19_main() + Noise_Ripples1618453155384_62_main() + Speaker_Sand_Noise1618453215471_107_main() + Molten_Noise1618453281396_130_main();                                                                                                                                                                                                                                                                            }\n",
  "uniforms": {
    "glowColor": {
      "value": {
        "r": 1,
        "g": 1,
        "b": 1
      },
      "type": "c",
      "glslType": "vec3"
    },
    "p": {
      "value": "1.09971764",
      "type": "f",
      "glslType": "float"
    },
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "noiseImage": {
      "value": null,
      "type": "t",
      "glslType": "sampler2D"
    },
    "distortion": {
      "value": "2",
      "type": "f",
      "glslType": "float"
    },
    "contrast": {
      "value": "1.5",
      "type": "f",
      "glslType": "float"
    },
    "Noise_Ripples1618453155384_62_speed": {
      "value": "0.02",
      "type": "f",
      "glslType": "float"
    },
    "Noise_Ripples1618453155384_62_color": {
      "value": {
        "r": 1,
        "g": 1,
        "b": 1
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Noise_Ripples1618453155384_62_resolution": {
      "value": {
        "x": "2",
        "y": "2"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "Noise_Ripples1618453155384_62_brightness": {
      "value": "0.1",
      "type": "f",
      "glslType": "float"
    },
    "waveLength": {
      "value": "68",
      "type": "f",
      "glslType": "float"
    },
    "frequency": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "Speaker_Sand_Noise1618453215471_107_speed": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "Speaker_Sand_Noise1618453215471_107_color": {
      "value": {
        "r": 1,
        "g": 1,
        "b": 1
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Speaker_Sand_Noise1618453215471_107_resolution": {
      "value": {
        "x": "800",
        "y": "800"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "uvScale": {
      "value": {
        "x": "1",
        "y": "1"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "color1": {
      "value": {
        "r": 0.7098039215686275,
        "g": 0.3137254901960784,
        "b": 0.8117647058823529
      },
      "type": "c",
      "glslType": "vec3"
    },
    "color2": {
      "value": {
        "r": 0.12941176470588237,
        "g": 0.24313725490196078,
        "b": 0.9803921568627451
      },
      "type": "c",
      "glslType": "vec3"
    },
    "color3": {
      "value": {
        "r": 0.8980392156862745,
        "g": 0.3568627450980392,
        "b": 0.8
      },
      "type": "c",
      "glslType": "vec3"
    },
    "permutations": {
      "value": "10",
      "type": "f",
      "glslType": "float"
    },
    "iterations": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "Molten_Noise1618453281396_130_brightness": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "Molten_Noise1618453281396_130_speed": {
      "value": "0.2",
      "type": "f",
      "glslType": "float"
    }
  },
  "url": "http://shaderfrog.com/app/view/5165",
  "user": {
    "username": "svensk007",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}